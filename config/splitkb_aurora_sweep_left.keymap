/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#include <dt-bindings/zmk/pointing.h>

#define BASE        0
#define GRAPHITE    1
#define NUM         2
#define SYM         3
#define NAV         4
#define SETTING     5
#define MOUSE       6
#define MOUSESLOW   7
#define MOUSESCROLL 8

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <180>;
    require-prior-idle-ms = <100>;
};

&sk {
    release-after-ms = <800>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

/ {
    combos {
        compatible = "zmk,combos";

        /****************************************
        ********** Left Hand Combos  ***********
        ****************************************/

        combo_ctrl_b {
            timeout-ms = <40>;
            key-positions = <11 12>;
            bindings = <&kp LC(B)>;
        };

        combo_save {
            timeout-ms = <40>;
            key-positions = <12 13>;
            bindings = <&kp LC(S)>;
        };

        combo_copy_yank {
            timeout-ms = <40>;
            key-positions = <21 22>;
            bindings = <&kp LG(C)>;
        };

	    combo_paste {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&kp LG(V)>;
        };

        combo_app_switcher {
            timeout-ms = <40>;
            key-positions = <21 22 23>;
            bindings = <&kp LG(TAB)>;
        };

    	combo_ctrl_tab {
            timeout-ms = <40>;
            key-positions = <2 13>;
            bindings = <&kp LC(TAB)>;
        };

    	combo_ctrl_tab_back {
            timeout-ms = <40>;
            key-positions = <2 11>;
            bindings = <&kp LC(LS(TAB))>;
        };

    	combo_swap_tab_down {
            timeout-ms = <40>;
            key-positions = <12 3>;
            bindings = <&kp LC(LS(PAGE_DOWN))>;
        };

    	combo_swap_tab_up {
            timeout-ms = <40>;
            key-positions = <1 12>;
            bindings = <&kp LC(LS(PAGE_UP))>;
        };

    	combo_back_history {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&kp LG(LBKT)>;
        };

    	combo_forward_history {
            timeout-ms = <40>;
            key-positions = <2 3>;
            bindings = <&kp LG(RBKT)>;
        };

        /****************************************
        ********** Right Hand Combos  ***********
        ****************************************/

    	combo_esc {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
            layers = <0 1 2 3>;
        };

        combo_return {
            timeout-ms = <40>;
            key-positions = <17 18>;
            bindings = <&kp RETURN>;
            layers = <0 1 2 3>;
        };

    	combo_del {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&kp DEL>;
        };

    	combo_tab {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp TAB>;
        };

    	combo_bol {
            timeout-ms = <40>;
            key-positions = <6 7>;
            bindings = <&kp LG(LEFT)>;
        };

    	combo_eol {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp LG(RIGHT)>;
        };

    	combo_word_left {
            timeout-ms = <40>;
            key-positions = <7 16>;
            bindings = <&kp LA(LEFT)>;
            layers = <0 1 2 3>;
        };

    	combo_word_right {
            timeout-ms = <40>;
            key-positions = <7 18>;
            bindings = <&kp LA(RIGHT)>;
            layers = <0 1 2 3>;
        };

        /****************************
        ******    Code Combos   *****
        ******  Right Hand Vim  *****
        *****************************/

        combo_focus_left {
            timeout-ms = <35>;
            key-positions = <17 26>;
            bindings = <&kp LC(H)>;
        };

        combo_focus_right {
            timeout-ms = <50>;
            key-positions = <17 28>;
            bindings = <&kp LC(L)>;
        };

        combo_focus_down {
            timeout-ms = <35>;
            key-positions = <16 27>;
            bindings = <&kp LC(J)>;
        };

        combo_focus_up {
            timeout-ms = <50>;
            key-positions = <18 27>;
            bindings = <&kp LC(K)>;
        };

        /****************************************
        ********** Both Hand Combos  ***********
        ****************************************/

        combo_caps_word {
            timeout-ms = <55>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };

        combo_tog_graphite {
            timeout-ms = <50>;
            key-positions = <11 12 13>;
            bindings = <&tog GRAPHITE>;
        };

    };

    behaviors {

        mo_kp_tap: momentary_hold_key_press_tap_prefer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        sk_kp_tap: stiky_key_press_tap_prefer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <100>;
            bindings = <&sk>, <&kp>;
        };

        bt_clcla: tap_dance_bt_control {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&none>, <&bt BT_CLR>, <&bt BT_CLR_ALL>;
        };

        apos_bslh: apos_backslash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp APOS>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_cmma: period_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp CMMA>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_cmma_hold: mod_hold_key_press_tap_prefer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&dot_cmma>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        /* 0 */
        default {
            bindings = <
                &kp Q &kp W &kp F &kp P &kp B
                &apos_bslh &kp L &kp U &kp Y &kp J

                &mt LC(LA(LSHIFT)) A &mo_kp_tap MOUSE R &mo_kp_tap NAV S &mo_kp_tap NUM T &kp G
                &kp M &kp N &kp E &mo_kp_tap SETTING I &mt LC(LA(LSHIFT)) O

                &kp Z &mt LALT X &mt LCMD C &mt LCMD D &kp V
                &kp K &mt LCMD H &dot_cmma_hold LCMD 0 &mt LALT MINUS &kp SLASH

                &sk LSFT &mo_kp_tap SYM BSPC &sk_kp_tap LCTRL SPC &key_repeat
            >;
		};

        /* 1 */
        graphite {
            bindings = <
                &kp B &kp L &kp D &kp W &kp Z
                &trans &kp F &kp O &kp U &kp J

                &mt LC(LA(LSHIFT)) N &trans &mo_kp_tap NAV T &mo_kp_tap NUM S &trans
                &kp Y &kp H &kp A &mo_kp_tap SETTING E &mt LC(LA(LSHIFT)) I

                &kp Q &trans &mt LCMD M &mt LCMD C &trans
                &trans &mt LCMD P &trans &trans &trans

                &trans &trans &trans &trans
            >;
		};

        /* 2 */
        numbers {
            bindings = <
                &none &none &none &none &none
                &none &kp NUM_7 &kp NUM_8 &kp NUM_9 &none

		        &none &sk LALT &sk LCMD &trans &none
                &kp MINUS &kp NUM_4 &kp NUM_5 &kp NUM_6 &kp NUM_0

                &none &none &none &none &none
                &kp DOT &kp NUM_1 &kp NUM_2 &kp NUM_3 &trans

	            &trans &trans &trans &trans
            >;
		};

        /* 3 */
	    symbol {
            bindings = <
                &none &kp EXCL &kp LBRC &kp RBRC &none
                &none &kp PERCENT &kp PLUS &kp EQUAL &none

                &kp AT &kp AMPS &kp LPAR &kp RPAR &kp PIPE
                &kp CARET &kp STAR &kp HASH &kp DOLLAR &kp COLON

                &kp GRAVE &mt LALT TILDE &mt LCMD LBKT &mt LCMD RBKT &none
                &none &mt LCMD LT &mt LCMD GT &mt LALT DQT &kp SEMICOLON

                &trans &trans &trans &trans
            >;
		};

        /* 4 */
	    navigation {
            bindings = <
                &none &none &none &none &none
                &none &kp END &kp HOME &none &none

                &none &sk LALT &trans &sk LCMD &none
                &kp LEFT &kp DOWN &kp UP &kp RIGHT &none

                &none &none &none &none &none
                &none &kp PAGE_DOWN &kp PAGE_UP &none &none

                &trans &trans &trans &trans
            >;
		};

        /* 5 */
    	settings {
            bindings = <
                &none &bt_clcla &ext_power EP_OFF &out OUT_TOG &none
                &none &none &none &none &none

                &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_SEL 4
                &none &kp C_BRIGHTNESS_INC &kp C_VOL_UP &trans &none

                &bt BT_DISC 3 &bt BT_DISC 2 &none &none &none
                &none &kp C_BRIGHTNESS_DEC &kp C_VOL_DN &none &none

                &none &none &kp C_PP &kp C_NEXT
            >;
        };

        /* 6 */
        mouse {
            bindings = <
                &none &none &none &mt LG(LS(NUM_5)) LG(LS(NUM_4)) &none
                &none &none &mmv MOVE_UP &none &none

                &none &trans &mo MOUSESCROLL &mo MOUSESLOW &none
                &none &mmv MOVE_LEFT &mmv MOVE_DOWN  &mmv MOVE_RIGHT &mkp MCLK

                &none &none &sk LCMD &sk LCTRL &none
                &none &none &none &sk LALT &kp INS

                &trans &none &mkp LCLK &mkp RCLK
            >;
        };

        /* 7 */
        mouse_slow {
            bindings = <
                &trans &trans &trans &trans &trans
                &trans &trans &mmv MOVE_Y(-900) &trans &trans
                &trans &trans &trans &trans &trans
                &trans &mmv MOVE_X(-900) &mmv MOVE_Y(900) &mmv MOVE_X(900) &trans
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans
            >;
        };

        /* 8 */
        mouse_scroll {
            bindings = <
               &trans &trans &trans &trans &trans
               &trans &trans &trans &trans &trans
               &trans &trans &trans &trans &trans
               &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_UP &msc SCRL_RIGHT &trans
               &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
               &trans &trans &trans &trans
            >;
        };


	};
};

