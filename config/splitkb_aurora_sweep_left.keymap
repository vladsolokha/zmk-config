/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <225>;
};

&sk {
    release-after-ms = <500>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

/ {
    combos {
        compatible = "zmk,combos";

        /****************************************
        ********** Left Hand Combos  ***********
        ****************************************/

	    combo_command_find {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&kp LG(F)>;
        };

        combo_ctrl_b {
            timeout-ms = <40>;
            key-positions = <11 12>;
            bindings = <&kp LC(B)>;
        };

        combo_tab {
            timeout-ms = <40>;
            key-positions = <21 22>;
            bindings = <&kp LC(TAB)>;
        };

        combo_cut {
            timeout-ms = <40>;
            key-positions = <12 21>;
            bindings = <&kp LG(X)>;
        };

	    combo_command_save {
            timeout-ms = <40>;
            key-positions = <2 3>;
            bindings = <&kp LG(S)>;
        };

        combo_save {
            timeout-ms = <40>;
            key-positions = <12 13>;
            bindings = <&kp LC(S)>;
        };

        combo_app_switcher {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&kp LG(TAB)>;
        };

     	combo_win_app_switcher {
            timeout-ms = <40>;
            key-positions = <21 23>;
            bindings = <&kp LA(TAB)>;
        };

        combo_copy {
            timeout-ms = <40>;
            key-positions = <13 22>;
            bindings = <&kp LG(C)>;
        };

        combo_paste {
            timeout-ms = <40>;
            key-positions = <12 23>;
            bindings = <&kp LG(V)>;
        };

    	combo_to_settings {
            timeout-ms = <40>;
            key-positions = <11 12 13>;
            bindings = <&to 4>;
        };

        /****************************************
        ********** Right Hand Combos  ***********
        ****************************************/

        combo_bol {
            timeout-ms = <40>;
            key-positions = <6 7>;
            bindings = <&kp LG(LEFT)>;
        };

    	combo_esc {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
            layers = <0 1 2 3>;
        };

    	combo_cmd_down {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&kp LG(DOWN)>;
        };

        combo_eol {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp LG(RIGHT)>;
        };

        combo_return {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RETURN>;
            layers = <0 1 2 3>;
        };

    	combo_cmd_up {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp LG(UP)>;
        };

    	combo_to_mouse {
            timeout-ms = <40>;
            key-positions = <16 17 18>;
            bindings = <&to 5>;
        };

        /****************************
        ******    Code Combos   *****
        ******  Right Hand Vim  *****
        *****************************/

        combo_focus_left {
            timeout-ms = <35>;
            key-positions = <17 26>;
            bindings = <&kp LC(H)>;
        };

        combo_focus_right {
            timeout-ms = <50>;
            key-positions = <17 28>;
            bindings = <&kp LC(L)>;
        };

        combo_focus_down {
            timeout-ms = <35>;
            key-positions = <16 27>;
            bindings = <&kp LC(J)>;
        };

        combo_focus_up {
            timeout-ms = <50>;
            key-positions = <18 27>;
            bindings = <&kp LC(K)>;
        };

    };

    behaviors {

        mo_kr: momentary_hold_key_repeat_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&key_repeat>;
        };

        mo_kp: momentary_hold_key_press_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        mo_kp_hold: momentary_hold_key_press_tap_prefer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <225>;
            bindings = <&mo>, <&kp>;
        };

        ppn: tap_dance_media_play_pause_next {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PP>, <&kp C_NEXT>;
        };

        ssh_cw: shift_caps_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;

        };

        bt_clcla: tap_dance_bt_control {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&none>, <&bt BT_CLR>, <&bt BT_CLR_ALL>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        /* 0 */
        default {
            bindings = <
                &none &kp W &kp F &kp P &none &none &kp L &kp U &kp Y &none
                &kp A &kp R &kp S &mo_kp_hold 1 T &kp G &kp M &kp N &kp E &kp I &kp O
                &kp QUOT &mt LALT X &mt LCMD C &mt LCTRL D &kp V &kp K &mt LCTRL H &mt LCMD CMMA &mt LALT DOT &kp SLASH
                &ssh_cw &mo_kp 3 BSPC &mt LC(LA(LSHIFT)) SPC &mo_kr 2 0
            >;
		};

        /* 1 */
        numbers {
            bindings = <
                &none &none &none &none &none &none &kp NUM_7 &kp NUM_8 &kp NUM_9 &none
		        &none &none &none &trans &none &kp MINUS &kp NUM_4 &kp NUM_5 &mt LSFT NUM_6 &kp NUM_0
                &none &sk LALT &sk LCMD &sk LCTRL &none &kp DOT &mt LCTRL NUM_1 &mt LCMD NUM_2 &mt LALT NUM_3 &trans
	            &trans &trans &trans &trans
            >;
		};

        /* 2 */
	    symbol {
            bindings = <
                &none &kp EXCL &kp LBRC &kp RBRC &none &none &kp BSLH &kp PLUS &kp EQUAL &none
                &kp AT &kp AMPS &kp LPAR &kp RPAR &kp TILDE &kp CARET &kp STAR &kp HASH &kp DOLLAR &kp SEMICOLON
                &kp GRAVE &mt LALT PIPE &mt LCMD LBKT &mt LCTRL RBKT &none &none &mt LCTRL PERCENT &mt LCMD UNDER &mt LALT MINUS &kp COLON
                &trans &trans &trans &trans
            >;
		};

        /* 3 */
	    navigation {
            bindings = <
                &none &kp Q &kp LG(LBKT) &kp LG(RBKT) &none &none &kp J &none &none &none
                &sk LSHIFT &kp LC(LS(TAB)) &kp DEL &kp TAB &kp LC(LS(PAGE_UP)) &none &kp LEFT &kp DOWN &kp UP &kp RIGHT
                &kp Z &sk LALT &sk LCMD &mt LCTRL B &kp LC(LS(PAGE_DOWN)) &none &mt LCTRL LG(LS(LEFT)) &mt LCMD LA(LS(LEFT)) &mt LALT LA(LS(RIGHT)) &kp LG(LS(RIGHT))
                &trans &trans &trans &trans
            >;
		};

        /* 4 */
    	settings {
            bindings = <
                &none &bt_clcla &out OUT_TOG &ppn &none &none &none &kp UP &none &none
                &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &kp C_VOL_UP &kp C_BRIGHTNESS_INC &kp LEFT &kp DOWN &kp RIGHT &none
                &bt BT_DISC 3 &bt BT_DISC 2 &none &ext_power EP_OFF &kp C_VOL_DN &kp C_BRIGHTNESS_DEC &none &none &none &none
                &to 0 &to 0 &to 0 &to 0
            >;
        };

        /* 5 */
        mouse {
            bindings = <
                &none &mt LG(LS(NUM_5)) LG(LS(NUM_4)) &none &kp INSERT &none &none &none &none &none &none
                &mkp MCLK &kp RET &kp DEL &mo 6 &none &none &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT
                &kp LG(Z) &sk LALT &mt LCMD ESC &mo 7 &none &none &mt LCTRL HOME &mt LCMD PAGE_DOWN &mt LALT PAGE_UP END &kp END
                &trans &to 0 &mkp LCLK &mkp RCLK
            >;
        };

        /* 6 */
        mouse_slow {
            bindings = <
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans &mmv MOVE_X(-800) &mmv MOVE_Y(800) &mmv MOVE_Y(-800) &mmv MOVE_X(800)
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans
            >;
        };

        /* 7 */
        mouse_scroll {
            bindings = <
               &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
               &trans &trans &trans &trans &trans &trans &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_UP &msc SCRL_RIGHT
               &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
               &trans &trans &trans &trans
            >;
        };

	};
};
