/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <225>;
};

&sk {
    release-after-ms = <800>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

/ {
    combos {
        compatible = "zmk,combos";

        /****************************************
        ********** Left Hand Combos  ***********
        ****************************************/

        combo_ctrl_b {
            timeout-ms = <40>;
            key-positions = <11 12>;
            bindings = <&kp LC(B)>;
        };

        combo_save {
            timeout-ms = <40>;
            key-positions = <12 13>;
            bindings = <&kp LC(S)>;
        };

        combo_del {
            timeout-ms = <40>;
            key-positions = <11 13>;
            bindings = <&kp DEL>;
        };

    	combo_to_settings {
            timeout-ms = <40>;
            key-positions = <11 12 13>;
            bindings = <&to 4>;
        };

    	combo_undo {
            timeout-ms = <40>;
            key-positions = <20 21>;
            bindings = <&kp LG(Z)>;
        };

        combo_copy_yank {
            timeout-ms = <40>;
            key-positions = <21 22>;
            bindings = <&kp LG(C)>;
        };

	    combo_paste {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&kp LG(V)>;
        };

        combo_app_switcher {
            timeout-ms = <40>;
            key-positions = <21 22 23>;
            bindings = <&kp LG(TAB)>;
        };

        /****************************************
        ********** Right Hand Combos  ***********
        ****************************************/

    	combo_esc {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
            layers = <0 1 2 3>;
        };

        combo_return {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RETURN>;
            layers = <0 1 2 3>;
        };

    	combo_tab {
            timeout-ms = <40>;
            key-positions = <16 18>;
            bindings = <&kp TAB>;
        };

    	combo_to_mouse {
            timeout-ms = <40>;
            key-positions = <16 17 18>;
            bindings = <&to 5>;
        };

    	combo_bot {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&kp LG(DOWN)>;
        };

    	combo_top {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp LG(UP)>;
        };

     	combo_win_app_switcher {
            timeout-ms = <40>;
            key-positions = <26 27 28>;
            bindings = <&kp LA(TAB)>;
        };

        /****************************
        ******    Code Combos   *****
        ******  Right Hand Vim  *****
        *****************************/

        combo_focus_left {
            timeout-ms = <35>;
            key-positions = <17 26>;
            bindings = <&kp LC(H)>;
        };

        combo_focus_right {
            timeout-ms = <50>;
            key-positions = <17 28>;
            bindings = <&kp LC(L)>;
        };

        combo_focus_down {
            timeout-ms = <35>;
            key-positions = <16 27>;
            bindings = <&kp LC(J)>;
        };

        combo_focus_up {
            timeout-ms = <50>;
            key-positions = <18 27>;
            bindings = <&kp LC(K)>;
        };

    };

    behaviors {

        mo_kr: momentary_hold_key_repeat_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&key_repeat>;
        };

        mo_kp: momentary_hold_key_press_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        hl_kr: hold_key_repeat_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&kp>, <&key_repeat>;
        };

        mo_kp_hold: momentary_hold_key_press_tap_prefer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <225>;
            bindings = <&mo>, <&kp>;
        };

        ppn: tap_dance_media_play_pause_next {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp C_PP>, <&kp C_NEXT>;
        };

        ssh_cw: shift_caps_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;

        };

        bt_clcla: tap_dance_bt_control {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&none>, <&bt BT_CLR>, <&bt BT_CLR_ALL>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        /* 0 */
        default {
            bindings = <
                &none &kp W &kp F &kp P &none
                &none &kp L &kp U &kp Y &none

                &mt LC(LA(LSHIFT)) A &kp R &mo_kp_hold 8 S &mo_kp_hold 1 T &kp G
                &kp M &kp N &kp E &kp I &mt LC(LA(LSHIFT)) O

                &kp QUOT &mt LALT X &mt LCMD C &mt LCMD D &kp V
                &kp K &mt LCMD H &mt LCMD CMMA &mt LALT DOT &kp SLASH

                &ssh_cw &mo_kp 3 BSPC &mt LCTRL SPC &mo_kr 2 0
            >;
		};

        /* 1 */
        numbers {
            bindings = <
                &none &none &none &none &none
                &none &kp NUM_7 &kp NUM_8 &kp NUM_9 &none

		        &none &none &none &trans &none
                &kp MINUS &kp NUM_4 &kp NUM_5 &kp NUM_6 &kp NUM_0

                &none &sk LALT &sk LCMD &none &none
                &kp DOT &kp NUM_1 &kp NUM_2 &kp NUM_3 &trans

	            &trans &trans &trans &trans
            >;
		};

        /* 2 */
	    symbol {
            bindings = <
                &none &kp EXCL &kp LBRC &kp RBRC &none
                &none &kp PERCENT &kp PLUS &kp EQUAL &none

                &kp AT &kp AMPS &kp LPAR &kp RPAR &kp TILDE
                &kp BSLH &kp STAR &kp HASH &kp MINUS &kp UNDER

                &kp GRAVE &mt LALT PIPE &mt LCMD LBKT &mt LCTRL RBKT &none
                &none &mt LCTRL CARET &mt LCMD SEMICOLON &mt LALT COLON &kp DOLLAR

                &trans &trans &trans &trans
            >;
		};

        /* 3 */
	    navigation {
            bindings = <
                &none &none &none &none &none
                &none &none &none &none &none

                &kp Z &kp Q &mt LSHIFT J &mt LSHIFT B &none
                &kp LEFT &kp DOWN &kp UP &kp RIGHT &none

                &none &sk LALT &sk LCMD &sk LCMD &none
                &none &mt LCMD LG(LEFT) &mt LCMD LA(LEFT) &mt LALT LA(RIGHT) &kp LG(RIGHT)

                &trans &trans &trans &trans
            >;
		};

        /* 4 */
    	settings {
            bindings = <
                &none &bt_clcla &out OUT_TOG &ppn &none
                &none &none &kp UP &none &none

                &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &kp C_VOL_UP
                &kp C_BRIGHTNESS_INC &kp LEFT &kp DOWN &kp RIGHT &none

                &bt BT_DISC 3 &bt BT_DISC 2 &none &ext_power EP_OFF &kp C_VOL_DN
                &kp C_BRIGHTNESS_DEC &none &none &none &none

                &to 0 &to 0 &to 0 &to 0
            >;
        };

        /* 5 */
        mouse {
            bindings = <
                &none &mt LG(LS(NUM_5)) LG(LS(NUM_4)) &mkp MCLK &kp INS &none
                &none &none &mmv MOVE_UP &none &none

                &none &kp RET &mo 7 &mo 6 &none
                &none &mmv MOVE_LEFT &mmv MOVE_DOWN  &mmv MOVE_RIGHT &none

                &none &sk LALT &mt LCMD ESC &sk LCTRL &none
                &none &mt END PAGE_DOWN &mt HOME PAGE_UP &none &none

                &trans &to 0 &mkp LCLK &mkp RCLK
            >;
        };

        /* 6 */
        mouse_slow {
            bindings = <
                &trans &trans &trans &trans &trans
                &trans &trans &mmv MOVE_Y(-800) &trans &trans

                &trans &trans &trans &trans &trans
                &trans &mmv MOVE_X(-800) &mmv MOVE_Y(800) &mmv MOVE_X(800) &trans

                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans

                &trans &trans &trans &trans
            >;
        };

        /* 7 */
        mouse_scroll {
            bindings = <
               &trans &trans &trans &trans &trans
               &trans &trans &msc SCRL_UP &trans &trans

               &trans &trans &trans &trans &trans
               &trans &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_RIGHT &trans

               &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans

               &trans &trans &trans &trans
            >;
        };

        /* 8 */
        browser_nav {
            bindings = <
                &none &none &none &none &none
                &none &none &kp LC(LS(PAGE_UP)) &kp LG(LA(L)) &none

		        &none &none &trans &none &none
                &none &kp LC(TAB) &kp LC(LS(TAB)) &kp LG(LA(I)) &kp LG(LA(E))

                &none &none &none &none &none
                &none &kp LC(LS(PAGE_DOWN)) &kp LG(LBKT) &kp LG(RBKT) &none

	            &trans &trans &trans &trans
            >;
		};

	};
};

