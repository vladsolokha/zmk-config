/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#include <dt-bindings/zmk/pointing.h>

&kscan {
    col-gpios
            = <&pro_micro 9 (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>
            , <&pro_micro 8  (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>
            , <&pro_micro 7  (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>
            , <&pro_micro 4  (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>
            , <&pro_micro 5  (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>
            ;
};

&right_encoder2 {
    status = "okay";
    a-gpios = <&pro_micro 20 GPIO_PULL_UP>;
    b-gpios = <&pro_micro 6  GPIO_PULL_UP>;
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <125>;
};

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <125>;
};

&sk {
    release-after-ms = <400>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

/ { 
    combos {
        compatible = "zmk,combos";

        /************************************
        ********** Global Combos  ***********
        *************************************/

    	combo_to_settings {
            timeout-ms = <40>;
            key-positions = <11 12 13>;
            bindings = <&to 3>;
        };
        
    	combo_to_mouse {
            timeout-ms = <40>;
            key-positions = <16 17 18>;
            bindings = <&to 4>;
        };
        
    	combo_esc {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
        };
        
        combo_return {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RETURN>;
        };
        
        combo_save {
            timeout-ms = <40>;
            key-positions = <12 13>;
            bindings = <&kp LC(S)>;
        };
	
	    combo_command_save {
            timeout-ms = <40>;
            key-positions = <2 3>;
            bindings = <&kp LG(S)>;
        }; 
        
        combo_copy {
            timeout-ms = <40>;
            key-positions = <13 22>;
            bindings = <&kp LG(C)>;
        };
        
        combo_paste {
            timeout-ms = <40>;
            key-positions = <12 23>;
            bindings = <&kp LG(V)>;
        };

	    combo_command_find {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&kp LG(F)>;
        };

     	combo_app_switcher {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&kp LG(TAB)>;
        };

     	combo_win_app_switcher {
            timeout-ms = <40>;
            key-positions = <21 23>;
            bindings = <&kp LA(TAB)>;
        };

        combo_switch_win {
            timeout-ms = <40>;
            key-positions = <10 11>;
            bindings = <&kp LG(GRAVE)>;
        };

        combo_ctrl_b {
            timeout-ms = <40>;
            key-positions = <11 12>;
            bindings = <&kp LC(B)>;
        };

        combo_bol {
            timeout-ms = <40>;
            key-positions = <6 7>;
            bindings = <&kp LG(LEFT)>;
        };
        
        combo_eol {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp LG(RIGHT)>;
        };

        combo_word_back {
            timeout-ms = <40>;
            key-positions = <7 16>;
            bindings = <&kp LA(LEFT)>;
        };

        combo_word_forward {
            timeout-ms = <40>;
            key-positions = <7 18>;
            bindings = <&kp LA(RIGHT)>;
        };

        combo_home {
            timeout-ms = <40>;
            key-positions = <6 17>;
            bindings = <&kp HOME>;
        };

        combo_end {
            timeout-ms = <40>;
            key-positions = <8 17>;
            bindings = <&kp END>;
        };

        combo_page_down {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&kp PAGE_DOWN>;
        };

        combo_page_up {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp PAGE_UP>;
        };

        /****************************
        ******  Browser Combos  *****
        *****************************/

        combo_tab_next {
            timeout-ms = <40>;
            key-positions = <2 13>;
            bindings = <&kp LC(TAB)>;
        };

        combo_tab_previous {
            timeout-ms = <40>;
            key-positions = <2 11>;
            bindings = <&kp LC(LS(TAB))>;
        };

        combo_tab_swap_left {
            timeout-ms = <40>;
            key-positions = <1 12>;
            bindings = <&kp LC(LS(PAGE_UP))>;
        };

        combo_tab_swap_right {
            timeout-ms = <40>;
            key-positions = <3 12>;
            bindings = <&kp LC(LS(PAGE_DOWN))>;
        };
 
        combo_www_back {
            timeout-ms = <40>;
            key-positions = <1 13>;
            bindings = <&kp LG(LEFT_BRACKET)>;
        };
        
        combo_www_forward {
            timeout-ms = <40>;
            key-positions = <13 21>;
            bindings = <&kp LG(RIGHT_BRACKET)>;
        };
        
        combo_inspect {
            timeout-ms = <40>;
            key-positions = <21 22>;
            bindings = <&kp LG(LA(I))>;
        };
        
        combo_select_element {
            timeout-ms = <40>;
            key-positions = <20 21>;
            bindings = <&kp LG(LS(C))>;
        };

        /****************************
        ******    Code Combos   *****
        *****************************/

        combo_focus_left {
            timeout-ms = <35>;
            key-positions = <17 26>;
            bindings = <&kp LC(H)>;
        };

        combo_focus_right {
            timeout-ms = <50>;
            key-positions = <17 28>;
            bindings = <&kp LC(L)>;
        };
    };

    behaviors {
        nav_word: nav_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <0>;
            layers = <2>;
            continue-list = <LEFT DOWN UP RIGHT PAGE_DOWN PAGE_UP LA(LEFT) LA(RIGHT)>;
            ignore-modifiers;
        };

        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <0>;
            layers = <1>;
            continue-list = <BSPC DEL DOT MINUS SLASH>;
            ignore-numbers;
        };

        mo_kr: momentary_hold_key_repeat_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&nav_word>, <&key_repeat>;
        };

        mo_kp: momentary_hold_key_press_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&num_word>, <&kp>;
        };

        /*used in mouse layer to toggle scroll and slow mode*/
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&tog>;
        };

        ppn: tap_dance_media_play_pause_next {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PP>, <&kp C_NEXT>;
        };

        ssh_cw: shift_caps_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;

        };

        bt_clcla: tap_dance_bt_control {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&none>, <&bt BT_CLR>, <&bt BT_CLR_ALL>;
        };

        amps_excl: amps_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
				
        caret_star: caret_star {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CARET>, <&kp STAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dollar_hash: dollar_hash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR>, <&kp HASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
				
    };

    keymap {
        compatible = "zmk,keymap";
                
        /* 0 */
        default_layer {
            bindings = <
                &none &kp W &kp F &kp P &none &none &kp L &kp U &kp Y &none  
                &mt LC(LA(LSHIFT)) A &kp R &kp S &kp T &kp G &kp M &kp N &kp E &kp I &mt LC(LA(LSHIFT)) O
                &kp QUOT &mt LALT X &mt LCMD C &mt LCTRL D &kp V &kp K &mt LCTRL H &mt LCMD CMMA &mt LALT DOT &kp SLASH
                &ssh_cw &mo_kp 1 BSPC &mt LCTRL SPC &mo_kr 2 0
            >;
		};

        /* 1 */
        extend_layer {
            bindings = <
                &none &mt LG(LS(NUM_5)) LG(LS(NUM_4)) &none &ppn &none &none &kp NUM_7 &kp NUM_8 &kp NUM_9 &none
		        &kp LG(Z) &mt LSFT RET &kp DEL &kp BSPC &kp K_APP &kp MINUS &kp NUM_4 &kp NUM_5 &mt LSFT NUM_6 &kp NUM_0  
                &kp LG(LS(Z)) &kp CAPSLOCK &mt LCMD ESC &mt LCTRL TAB &kp INS &kp DOT &mt LCTRL NUM_1 &mt LCMD NUM_2 &mt LALT NUM_3 &trans 
	            &trans &trans &trans &trans
            >;
		};
		
        /* 2 */
	    symbol_layer {
            bindings = <
                &none &kp Q &kp GRAVE &kp BSLH &none &none &kp CARET &kp DOLLAR &kp EQUAL &none 
                &kp AT &amps_excl &kp LPAR &kp RPAR &kp PERCENT &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp SEMICOLON
                &kp Z &mt LALT UNDER &mt LCMD LBKT &mt LCTRL RBKT &kp B &kp J &mt LCTRL STAR &mt LCMD HASH &mt LALT MINUS &kp COLON
                &trans &trans &trans &trans
            >;
		};	

        /* 3 */
    	settings_layer {
            bindings = <
                &none &bt_clcla &bt BT_DISC 2 &ppn &none &none &none &kp UP &none &none
                &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_INC &kp C_VOL_DN  &kp C_VOL_UP &none &none &kp LEFT &kp DOWN &kp RIGHT &none 
                &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &none &none &none &none &none &none
                &to 0 &to 0 &to 0 &to 0
            >;
        };

        /* 4 */
        mouse_layer {
            bindings = <
                &none &none &none &kp LG(V) &none &none &none &mmv MOVE_UP &kp LG(C) &none
                &kp LG(Z) &kp RET &mo_tog 6 6 &mo_tog 5 5 &kp K_APP &kp HOME &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp END
                &kp LG(LS(Z)) &mt LALT LG(X) &mt LCMD ESC &mt LCTRL TAB &none &none &mt LCTRL PAGE_DOWN &mt LCMD PAGE_UP &mkp MCLK &none
                &trans &to 0 &mkp LCLK &mkp RCLK
            >;
        };

        /* 5 */
        mouse_layer_slow {
            bindings = <
                &trans &trans &trans &trans &trans &trans &trans &mmv MOVE_Y(-800) &trans &trans                            
                &trans &trans &trans &trans &trans &trans &mmv MOVE_X(-800) &mmv MOVE_Y(800) &mmv MOVE_X(800) &trans
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans                               
                &trans &trans &trans &trans                                             
            >;
        };

        /* 6 */
        mouse_layer_scroll {
            bindings = <
               &trans &trans &trans &trans &trans &trans &trans &msc SCRL_UP &trans &trans                               
               &trans &trans &trans &trans &trans &trans &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_RIGHT &trans        
               &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
               &trans &trans &trans &trans                                                           
            >;
        };

	};
};
